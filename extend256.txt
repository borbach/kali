dd the entire disk
dd if=/dev/sdb of=/dev/sdc bs=4M status=progress
fdisk /dev/sdc
p
d parition 5
d partition 4
d partion 3
n partition 3 extended
n partitoon 5 +100G
n partition 6 
delete everything but the boot and UEFI partitions
create new extended partition - parition 3
create 2 new logical partitions - partition 5 and 6
mkfs /dev/sdc5
mkfs /dev/sdc6
dd if=/dev/sdb4 of=/dev/sdc5 bs=4M status=progress
dd if=/dev/sdb5 of=/dev/sdc6 bs=4M status=progress
create 1 logical partition - partition 5 for the entire rest of the disk
mkfs.ext4 /dev/sdc5
then mount /dev/sdc5 (or whatever the new partition name) on mnt
create all the directories in the root file system
cd /mnt/bin
cp -av /bin/* .
cd /mnt/home
cp -av /home/* .
do this for all the directories except /proc and /sys
change /etc/fstab to include the new root directory as follows:

# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# systemd generates mount units based on this file, see systemd.mount(5).
# Please run 'systemctl daemon-reload' after making changes here.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
#/dev/mapper/asus14--vg-root /               ext4    errors=remount-ro 0       1
UUID=30812f51-8bbd-43bd-b471-fcc45b5db1f3 /               ext4    errors=remount-ro 0       1
# /boot was on /dev/mmcblk1p1 during installation
UUID=c6e2c45d-ea84-4dcb-9b17-9b09b58ea81f  /boot           ext2    defaults        0       2
#/dev/mapper/asus14--vg-swap_1 none            swap    sw              0       0

In addition the grub.cfg file should be as follows:


menuentry 'Kali GNU/Linux' --class kali --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-simple-6b8653b2-603b-43d2-9add-6cd6587c343e' {
	load_video
	insmod gzio
	if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi
	insmod part_gpt
	insmod ext2
	set root='hd0,msdos1'
	if [ x$feature_platform_search_hint = xy ]; then
	  search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,gpt2 c6e2c45d-ea84-4dcb-9b17-9b09b58ea81f 
	else
	  search --no-floppy --fs-uuid --set=root c6e2c45d-ea84-4dcb-9b17-9b09b58ea81f
	fi
	echo	'Loading Linux 6.8.11-amd64 ...'
#	linux	/vmlinuz-6.8.11-amd64 root=/dev/mapper/asus14--vg-root ro single splash
	linux	/vmlinuz-6.8.11-amd64 root=UUID=30812f51-8bbd-43bd-b471-fcc45b5db1f3 ro single splash
	echo	'Loading initial ramdisk ...'
	initrd	/initrd.img-6.8.11-amd64
}

also do ln -s for initrd.img and vmlinuz files
ln -s initird.img /boot/initrd.img....

In the final analysis, use fdisk to create the boot and UEFI partitions and dd the boot and UEFI partitions to them.
Then create an extended partition with the rest of the disk space.
create 2 30 GB partitions, usually 5 and 6.
Then create a 7th partition with the rest of the disk size.
DD the 4th partition of the source to the 5th partition of the target
DD the 5th partition of the source to the 6th partition of the target
make sure to mkfs.ext4 /dev/sdc7 - the 7th partition


fdisk -l
sleep 10
fdisk /dev/mmcblk0
sleep 10
fdisk -l
sleep 10
pvdisplay
sleep 10
pvcreate /dev/mmcblk0p3
sleep 10
pvdisplay
sleep 10
vgdisplay | grep Name
sleep 10
vgextend asus14-vg /dev/mmcblk0p3
sleep 10
vgdisplay
sleep 10
lvdisplay | grep Path
sleep 10
lvextend -l +100%FREE /dev/asus14-vg/root
sleep 10
lvdisplay
sleep 10
resize2fs /dev/asus14-vg/root
sleep 10
df -lh
sleep 10


You may also have to delete /dev/mmcblk1p7 in fdisk and recreate it. In addition, you probably need to:
mkfs.ext4 /dev/mmcblk1p7

So in order to create a 256GB disk from a 65 GB one, you can use fdisk to create a primary boot partiotn of about 500MB and a primary UEFI partiton of about 500 MB.
Then create an extended partition for the rest of the disk.
create 2 more primary partitions, each about 30 GB as partitons 5 and 6.
You can also create another 7th partition for the rest of the disk, although you may have to delete it later in fdisk.

Then dd each parition separately to the corresponding partition on the 256 GB target disk
dd if=/dev/sdb1 of=/dev/sdc1 bs=4M status=progress for the boot partition
dd if=/dev/sdb2 of=/dev/sdc2 bs=4M status=progress for the UEFI partition
dd if=/dev/sdb4 of=/dev/sdc5 bs=4M status=progress for the first root partition
dd if=/dev/sdb5 of=/dev/sdc6 bs=4M status=progress for the second root partition

Then you can use a combination of the following commands:


fdisk -l
fdisk /dev/mmcblk1
fdisk -l
pvdisplay
pvcreate /dev/mmcblk1p7
pvdisplay
vgdisplay | grep Name
vgextend asus14-vg /dev/mmcblk1p7
vgdisplay
lvdisplay | grep Path
lvextend -l +100%FREE /dev/asus14-vg/root
lvdisplay
resize2fs /dev/asus14-vg/root
df -lh


You may have to use fdisk /dev/mmcblk1 to create and/or delete the 7th partition.
You may also need mkfs.ext4 /dev/mmcblk1p7

Yes, you can delete physical volumes in Linux, but you must first remove them from any volume groups they are part of: 
Remove from a volume group
Use the vgreduce command to remove a physical volume from a volume group: 
If the volume group has more than one physical volume, use the command vgreduce VolumeGroupName /dev/sdb1. 
If the volume group has only one physical volume, use the command vgremove VolumeGroupName. 
Remove the LVM label
Use the pvremove command to remove the LVM label from a physical volume: 
For example, use the command pvremove /dev/ram15. 
Check if used by logical volumes
Before removing a physical volume, use the pvdisplay command to ensure it is not used by any logical volumes. 
Restore volume group metadata
If you make a mistake, you can use the vgcfgrestore command to restore the volume group metadata to its previous state14-vg

vgremove asus14-vg
 
vgcreate asus14-vg /dev/sdc5 /dev/sdc6 /dev/sdc7
lvcreate -L231.7G -n root asus14-vg


